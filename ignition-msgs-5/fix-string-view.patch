--- a/src/Generator.cc
+++ b/src/Generator.cc
@@ -71,12 +71,12 @@ bool Generator::Generate(const FileDescriptor *_file,
                                OutputDirectory *_generatorContext,
                                std::string * /*_error*/) const
 {
-  std::string headerFilename = _file->name();
+  std::string headerFilename = std::string(_file->name());
   std::string delim = ".proto";
   size_t pos = headerFilename.rfind(delim);
   headerFilename.replace(pos, delim.size(), ".pb.h");
 
-  std::string sourceFilename = _file->name();
+  std::string sourceFilename = std::string(_file->name());
   pos = sourceFilename.rfind(delim);
   sourceFilename.replace(pos, delim.size(), ".pb.cc");
 
@@ -143,8 +143,8 @@ bool Generator::Generate(const FileDescriptor *_file,
 
     // Call the IGN_REGISTER_STATIC_MSG macro
     std::string factory = "IGN_REGISTER_STATIC_MSG(\"ign_msgs.";
-    factory += _file->message_type(0)->name() + "\", " +
-      _file->message_type(0)->name() +")";
+    factory += std::string(_file->message_type(0)->name()) + "\", " +
+      std::string(_file->message_type(0)->name()) +")";
     printer.Print(factory.c_str(), "name", "includes");
   }
 
@@ -157,23 +157,23 @@ bool Generator::Generate(const FileDescriptor *_file,
 
     // Define std::unique_ptr types for our messages
     std::string ptrTypes = "typedef std::unique_ptr<"
-      + _file->message_type(0)->name() + "> "
-      + _file->message_type(0)->name() + "UniquePtr;\n";
+      + std::string(_file->message_type(0)->name()) + "> "
+      + std::string(_file->message_type(0)->name()) + "UniquePtr;\n";
 
     // Define const std::unique_ptr types for our messages
     ptrTypes += "typedef std::unique_ptr<const "
-      + _file->message_type(0)->name() + "> Const"
-      + _file->message_type(0)->name() + "UniquePtr;\n";
+      + std::string(_file->message_type(0)->name()) + "> Const"
+      + std::string(_file->message_type(0)->name()) + "UniquePtr;\n";
 
     // Define std::shared_ptr types for our messages
     ptrTypes += "typedef std::shared_ptr<"
-      + _file->message_type(0)->name() + "> "
-      + _file->message_type(0)->name() + "SharedPtr;\n";
+      + std::string(_file->message_type(0)->name()) + "> "
+      + std::string(_file->message_type(0)->name()) + "SharedPtr;\n";
 
     // Define const std::shared_ptr types for our messages
     ptrTypes += "typedef std::shared_ptr<const "
-      + _file->message_type(0)->name() + "> Const"
-      + _file->message_type(0)->name() + "SharedPtr;\n";
+      + std::string(_file->message_type(0)->name()) + "> Const"
+      + std::string(_file->message_type(0)->name()) + "SharedPtr;\n";
 
     printer.Print(ptrTypes.c_str(), "name", "namespace_scope");
   }
